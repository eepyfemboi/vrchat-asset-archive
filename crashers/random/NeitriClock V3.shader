Shader "Neitri/Clock V3" {
	Properties {
		_MainTex ("_MainTex", 2D) = "white" {}
		[HDR] _Color ("_Color", Vector) = (1,1,1,1)
		_CompassUvCenter ("_CompassUvCenter", Vector) = (0.8,0.395,0,0)
	}
	SubShader {
		LOD 100
		Tags { "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		Pass {
			LOD 100
			Tags { "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			Cull Off
			GpuProgramID 41483
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// COLOR                    0   xyzw        2     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// COLOR                    0   xyzw        3     NONE   float   xyzw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[7], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_input v2.xyz
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o2.xyz
					dcl_output o3.xyzw
					dcl_temps 6
					mad r0.zw, v1.xxxy, cb0[2].xxxy, cb0[2].zzzw
					round_ni r1.x, cb1[0].y
					ftou r1.x, r1.x
					udiv r1.y, null, r1.x, l(10)
					udiv r1.z, null, r1.y, l(6)
					udiv r1.w, null, r1.z, l(10)
					udiv r2.x, null, r1.w, l(6)
					udiv r2.y, null, r2.x, l(10)
					imad r2.z, r2.y, l(-10), r2.x
					eq r2.w, v2.x, l(0.000000)
					if_nz r2.w
					  imad r1.x, r1.y, l(-10), r1.x
					  imad r1.y, r1.z, l(-6), r1.y
					  imad r1.z, r1.w, l(-10), r1.z
					  imad r1.w, r2.x, l(-6), r1.w
					  eq r2.xw, v2.yyyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					  utof r1.xy, r1.xyxx
					  mad r1.x, r1.x, l(0.100000), r0.z
					  mad r1.y, r1.y, l(0.100000), r0.z
					  movc r1.x, r2.w, r1.x, r1.y
					  utof r1.y, r1.z
					  mad r1.y, r1.y, l(0.100000), r0.z
					  iadd r3.x, r2.z, r2.y
					  iadd r3.x, r1.w, r3.x
					  iadd r1.z, r1.z, r3.x
					  mul r4.xyzw, cb0[3].xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
					  movc r5.xyzw, r1.zzzz, cb0[3].xyzw, r4.xyzw
					  utof r1.z, r1.w
					  mad r1.z, r1.z, l(0.100000), r0.z
					  movc r3.xyzw, r3.xxxx, cb0[3].xyzw, r4.xyzw
					  movc r3.xyzw, r2.wwww, r5.xyzw, r3.xyzw
					  movc r1.y, r2.w, r1.y, r1.z
					  movc o3.xyzw, r2.xxxx, cb0[3].xyzw, r3.xyzw
					  movc r0.x, r2.x, r1.x, r1.y
					  mov o2.xyz, l(0,0,0,0)
					  mov o1.xy, r0.xwxx
					else 
					  eq r0.x, v2.x, l(1.000000)
					  if_nz r0.x
					    eq r1.xy, v2.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
					    utof r0.x, r2.z
					    mad r0.x, r0.x, l(0.100000), r0.z
					    iadd r1.z, r2.z, r2.y
					    mul r3.xyzw, cb0[3].xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
					    movc r4.xyzw, r1.zzzz, cb0[3].xyzw, r3.xyzw
					    utof r1.z, r2.y
					    mad r1.z, r1.z, l(0.100000), r0.z
					    movc r2.xyzw, r2.yyyy, cb0[3].xyzw, r3.xyzw
					    movc r2.xyzw, r1.yyyy, r4.xyzw, r2.xyzw
					    movc r0.x, r1.y, r0.x, r1.z
					    add r1.z, cb1[0].y, cb1[0].y
					    round_ni r1.z, r1.z
					    mul r1.z, r1.z, l(0.500000)
					    ge r1.w, r1.z, -r1.z
					    frc r1.z, |r1.z|
					    movc r1.z, r1.w, r1.z, -r1.z
					    add r1.z, r1.z, r1.z
					    mul r3.xyzw, r1.zzzz, cb0[3].xyzw
					    movc r3.xyzw, r1.yyyy, r3.xyzw, cb0[3].xyzw
					    movc o3.xyzw, r1.xxxx, r2.xyzw, r3.xyzw
					    movc r0.y, r1.x, r0.x, r0.z
					    mov o2.xyz, l(0,0,0,0)
					    mov o1.xy, r0.ywyy
					  else 
					    eq r0.x, v2.y, l(0.000000)
					    if_nz r0.x
					      eq r0.x, v2.z, l(0.000000)
					      frc r1.x, cb1[0].y
					      mul_sat r2.x, cb1[3].w, l(0.011111)
					      mov r1.yz, l(0,0.150000,0.050000,0)
					      mov r2.yz, l(0,0.030000,0.010000,0)
					      movc o2.xyz, r0.xxxx, r1.xyzx, r2.xyzx
					      mov o1.xy, r0.zwzz
					    else 
					      eq r0.x, v2.z, l(0.000000)
					      mov r1.x, cb2[4].x
					      mov r1.y, cb2[5].x
					      mov r1.z, cb2[6].x
					      dp3 r0.y, r1.xyzx, r1.xyzx
					      rsq r0.y, r0.y
					      mul r1.xyz, r0.yyyy, r1.xyzx
					      mad r1.xyz, -r1.yyyy, l(0.000000, 1.000000, 0.000000, 0.000000), r1.xyzx
					      dp3 r0.y, r1.xyzx, r1.xyzx
					      rsq r0.y, r0.y
					      mul r1.xy, r0.yyyy, r1.xzxx
					      add r0.y, -|r1.x|, l(1.000000)
					      sqrt r0.y, r0.y
					      mad r1.z, |r1.x|, l(-0.018729), l(0.074261)
					      mad r1.z, r1.z, |r1.x|, l(-0.212114)
					      mad r1.z, r1.z, |r1.x|, l(1.570729)
					      mul r1.w, r0.y, r1.z
					      mad r1.w, r1.w, l(-2.000000), l(3.141593)
					      lt r1.x, r1.x, -r1.x
					      and r1.x, r1.x, r1.w
					      mad r0.y, r1.z, r0.y, r1.x
					      lt r1.x, l(0.000000), r1.y
					      lt r1.y, r1.y, l(0.000000)
					      iadd r1.x, -r1.x, r1.y
					      itof r1.x, r1.x
					      mad r0.y, r0.y, r1.x, l(-1.570000)
					      sincos r1.x, r2.x, r0.y
					      sincos r3.x, null, -r0.y
					      add r4.xy, v1.xyxx, -cb0[4].xyxx
					      mov r3.y, r2.x
					      mul r4.z, r4.y, l(0.500000)
					      dp2 r2.x, r3.yxyy, r4.xzxx
					      mov r3.z, r1.x
					      dp4 r2.y, r3.zzyy, r4.xxzz
					      add r1.xy, r2.xyxx, cb0[4].xyxx
					      movc o1.xy, r0.xxxx, r1.xyxx, r0.zwzz
					      mov o2.xyz, l(0,0,0,0)
					    endif 
					    mov o3.xyzw, cb0[3].xyzw
					  endif 
					endif 
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// COLOR                    0   xyzw        2     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// COLOR                    0   xyzw        3     NONE   float   xyzw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[7], immediateIndexed
					dcl_constantbuffer CB3[32], dynamicIndexed
					dcl_constantbuffer CB4[1], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_input v2.xyz
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o2.xyz
					dcl_output o3.xyzw
					dcl_temps 6
					mad r0.zw, v1.xxxy, cb0[2].xxxy, cb0[2].zzzw
					round_ni r1.x, cb1[0].y
					ftou r1.x, r1.x
					udiv r1.y, null, r1.x, l(10)
					udiv r1.z, null, r1.y, l(6)
					udiv r1.w, null, r1.z, l(10)
					udiv r2.x, null, r1.w, l(6)
					udiv r2.y, null, r2.x, l(10)
					imad r2.z, r2.y, l(-10), r2.x
					eq r2.w, v2.x, l(0.000000)
					if_nz r2.w
					  imad r1.x, r1.y, l(-10), r1.x
					  imad r1.y, r1.z, l(-6), r1.y
					  imad r1.z, r1.w, l(-10), r1.z
					  imad r1.w, r2.x, l(-6), r1.w
					  eq r2.xw, v2.yyyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					  utof r1.xy, r1.xyxx
					  mad r1.x, r1.x, l(0.100000), r0.z
					  mad r1.y, r1.y, l(0.100000), r0.z
					  movc r1.x, r2.w, r1.x, r1.y
					  utof r1.y, r1.z
					  mad r1.y, r1.y, l(0.100000), r0.z
					  iadd r3.x, r2.z, r2.y
					  iadd r3.x, r1.w, r3.x
					  iadd r1.z, r1.z, r3.x
					  mul r4.xyzw, cb0[3].xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
					  movc r5.xyzw, r1.zzzz, cb0[3].xyzw, r4.xyzw
					  utof r1.z, r1.w
					  mad r1.z, r1.z, l(0.100000), r0.z
					  movc r3.xyzw, r3.xxxx, cb0[3].xyzw, r4.xyzw
					  movc r3.xyzw, r2.wwww, r5.xyzw, r3.xyzw
					  movc r1.y, r2.w, r1.y, r1.z
					  movc o3.xyzw, r2.xxxx, cb0[3].xyzw, r3.xyzw
					  movc r0.x, r2.x, r1.x, r1.y
					  mov o2.xyz, l(0,0,0,0)
					  mov o1.xy, r0.xwxx
					else 
					  eq r0.x, v2.x, l(1.000000)
					  if_nz r0.x
					    eq r1.xy, v2.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
					    utof r0.x, r2.z
					    mad r0.x, r0.x, l(0.100000), r0.z
					    iadd r1.z, r2.z, r2.y
					    mul r3.xyzw, cb0[3].xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
					    movc r4.xyzw, r1.zzzz, cb0[3].xyzw, r3.xyzw
					    utof r1.z, r2.y
					    mad r1.z, r1.z, l(0.100000), r0.z
					    movc r2.xyzw, r2.yyyy, cb0[3].xyzw, r3.xyzw
					    movc r2.xyzw, r1.yyyy, r4.xyzw, r2.xyzw
					    movc r0.x, r1.y, r0.x, r1.z
					    add r1.z, cb1[0].y, cb1[0].y
					    round_ni r1.z, r1.z
					    mul r1.z, r1.z, l(0.500000)
					    ge r1.w, r1.z, -r1.z
					    frc r1.z, |r1.z|
					    movc r1.z, r1.w, r1.z, -r1.z
					    add r1.z, r1.z, r1.z
					    mul r3.xyzw, r1.zzzz, cb0[3].xyzw
					    movc r3.xyzw, r1.yyyy, r3.xyzw, cb0[3].xyzw
					    movc o3.xyzw, r1.xxxx, r2.xyzw, r3.xyzw
					    movc r0.y, r1.x, r0.x, r0.z
					    mov o2.xyz, l(0,0,0,0)
					    mov o1.xy, r0.ywyy
					  else 
					    eq r0.x, v2.y, l(0.000000)
					    if_nz r0.x
					      eq r0.x, v2.z, l(0.000000)
					      frc r1.x, cb1[0].y
					      mul_sat r2.x, cb1[3].w, l(0.011111)
					      mov r1.yz, l(0,0.150000,0.050000,0)
					      mov r2.yz, l(0,0.030000,0.010000,0)
					      movc o2.xyz, r0.xxxx, r1.xyzx, r2.xyzx
					      mov o1.xy, r0.zwzz
					    else 
					      eq r0.x, v2.z, l(0.000000)
					      mov r1.x, cb2[4].x
					      mov r1.y, cb2[5].x
					      mov r1.z, cb2[6].x
					      dp3 r0.y, r1.xyzx, r1.xyzx
					      rsq r0.y, r0.y
					      mul r1.xyz, r0.yyyy, r1.xyzx
					      mad r1.xyz, -r1.yyyy, l(0.000000, 1.000000, 0.000000, 0.000000), r1.xyzx
					      dp3 r0.y, r1.xyzx, r1.xyzx
					      rsq r0.y, r0.y
					      mul r1.xy, r0.yyyy, r1.xzxx
					      add r0.y, -|r1.x|, l(1.000000)
					      sqrt r0.y, r0.y
					      mad r1.z, |r1.x|, l(-0.018729), l(0.074261)
					      mad r1.z, r1.z, |r1.x|, l(-0.212114)
					      mad r1.z, r1.z, |r1.x|, l(1.570729)
					      mul r1.w, r0.y, r1.z
					      mad r1.w, r1.w, l(-2.000000), l(3.141593)
					      lt r1.x, r1.x, -r1.x
					      and r1.x, r1.x, r1.w
					      mad r0.y, r1.z, r0.y, r1.x
					      lt r1.x, l(0.000000), r1.y
					      lt r1.y, r1.y, l(0.000000)
					      iadd r1.x, -r1.x, r1.y
					      itof r1.x, r1.x
					      mad r0.y, r0.y, r1.x, l(-1.570000)
					      sincos r1.x, r2.x, r0.y
					      sincos r3.x, null, -r0.y
					      add r4.xy, v1.xyxx, -cb0[4].xyxx
					      mov r3.y, r2.x
					      mul r4.z, r4.y, l(0.500000)
					      dp2 r2.x, r3.yxyy, r4.xzxx
					      mov r3.z, r1.x
					      dp4 r2.y, r3.zzyy, r4.xxzz
					      add r1.xy, r2.xyxx, cb0[4].xyxx
					      movc o1.xy, r0.xxxx, r1.xyxx, r0.zwzz
					      mov o2.xyz, l(0,0,0,0)
					    endif 
					    mov o3.xyzw, cb0[3].xyzw
					  endif 
					endif 
					ishl r0.x, cb4[0].x, l(2)
					mul r1.xyzw, v0.yyyy, cb2[1].xyzw
					mad r1.xyzw, cb2[0].xyzw, v0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[2].xyzw, v0.zzzz, r1.xyzw
					add r1.xyzw, r1.xyzw, cb2[3].xyzw
					mul r2.xyzw, r1.yyyy, cb3[r0.x + 25].xyzw
					mad r2.xyzw, cb3[r0.x + 24].xyzw, r1.xxxx, r2.xyzw
					mad r2.xyzw, cb3[r0.x + 26].xyzw, r1.zzzz, r2.xyzw
					mad o0.xyzw, cb3[r0.x + 27].xyzw, r1.wwww, r2.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// COLOR                    0   xyzw        3     NONE   float   xyzw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v2.xyz
					dcl_input_ps linear v3.xyzw
					dcl_output o0.xyzw
					dcl_temps 2
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mul r0.xyzw, r0.xyzw, v3.xyzw
					lt r1.x, l(0.000000), v2.x
					div r1.y, v1.x, v2.y
					round_ni r1.y, r1.y
					mad r1.z, -r1.y, v2.y, v2.x
					ge r1.z, r1.z, l(0.000000)
					and r1.z, r1.z, l(0x3f800000)
					mul r1.z, r0.w, r1.z
					add r1.w, v1.x, v2.z
					div r1.w, r1.w, v2.y
					round_ni r1.w, r1.w
					add r1.y, -r1.w, r1.y
					ge r1.y, r1.y, l(-0.500000)
					and r1.y, r1.y, l(0x3f800000)
					mul r1.y, r1.y, r1.z
					movc r0.w, r1.x, r1.y, r0.w
					lt r1.x, r0.w, l(0.300000)
					discard_nz r1.x
					mov o0.xyzw, r0.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// COLOR                    0   xyzw        3     NONE   float   xyzw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v2.xyz
					dcl_input_ps linear v3.xyzw
					dcl_output o0.xyzw
					dcl_temps 2
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mul r0.xyzw, r0.xyzw, v3.xyzw
					lt r1.x, l(0.000000), v2.x
					div r1.y, v1.x, v2.y
					round_ni r1.y, r1.y
					mad r1.z, -r1.y, v2.y, v2.x
					ge r1.z, r1.z, l(0.000000)
					and r1.z, r1.z, l(0x3f800000)
					mul r1.z, r0.w, r1.z
					add r1.w, v1.x, v2.z
					div r1.w, r1.w, v2.y
					round_ni r1.w, r1.w
					add r1.y, -r1.w, r1.y
					ge r1.y, r1.y, l(-0.500000)
					and r1.y, r1.y, l(0x3f800000)
					mul r1.y, r1.y, r1.z
					movc r0.w, r1.x, r1.y, r0.w
					lt r1.x, r0.w, l(0.300000)
					discard_nz r1.x
					mov o0.xyzw, r0.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
	}
}